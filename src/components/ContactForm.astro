---
export interface Props {
  name?: string,
  email?: string,
  phone?: number,
  message?: string
}
const {name, email, phone, message}= Astro.props
---

<section class="section-contact">
  
  <form>
    <h2>Contact Us</h2>
    <div class="form-row">
      <label for="fullname"><span class="material-icons">person</span> Full name</label>
      <input type="text" id="fullname" name="fullname">
    </div>
    <div class="form-row">
      <label for="email"><span class="material-icons">mail</span> Email</label>
      <input type="email" id="email" name="email">
    </div>
    <div class="form-row">
      <label for="phone"><span class="material-icons">phone</span> Phone</label>
      <input type="text" id="phone" name="phone">
    </div>
    <div class="form-row">
      <label for="message"><span class="material-icons">message</span> Message</label>
      <textarea name="message" id="message" cols="30" rows="10"></textarea>
    </div>
    <div class="form-row">
      <button class="btn">
        <span class="material-icons">send</span> Send
      </button>
    </div>
  </form>
  <div class="success-response"></div>
  <div class="failure-response"></div>
</section>

<style>
  .section-contact {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  .section-contact h2 {
    text-align: center;
    margin-bottom: 25px;
  }

  form {
    background-color: #0F6292;
    color: #fff;
    padding: 40px;
    border-radius: 8px;
    margin: 60px 0;
    width: 22%;
    box-shadow: 1px 1px rgba(0, 0, 0, 0.20);
  }

  input,
  textarea {
    padding: 12px 20px;
    border: none;
    border-radius: 4px;
    margin: 15px 0;
    font-family: inherit;
  }
  input:focus {
    border: none;
    outline: none;
  }
  .form-row {
    display: flex;
    flex-direction: column;
  }
  button:hover {
    background-color: #555;
    color: #fff;
    transition: all 0.3s ease-in;
  }
  .success-message,
  .failure-message {
    display: none;
  }

  .success-response.active{
    display: inline-block;
    background-color: #B0EBB4;
    font-weight: ;
    padding: 20px 25px;
    border: none;
    border-radius: 5px;
    box-shadow: 1px 2px rgba(0, 0, 0, 0.20);
    margin-bottom: 25px;
  }  

  .failure-response.active{
    display: inline-block;
    background-color: #FFCBCB;
    font-weight: ;
    padding: 20px 25px;
    border: none;
    border-radius: 5px;
    box-shadow: 1px 2px rgba(0, 0, 0, 0.20);
    margin-bottom: 25px;
  }  

  @media screen and (max-width:636px) {
    form {
      width: 80%;
    }
  }
</style>

<script>
  const fullName = document.getElementById('fullname');
  const email = document.getElementById('email');
  const phone = document. getElementById('phone');
  const message = document.getElementById('message');
  const send = document.querySelector('.btn');
  const successConfirmation = document.querySelector('.success-response');
  const failureConfirmation = document.querySelector('.failure-response');


  
  send.addEventListener('click', (e) => {
    e.preventDefault();

    const url ="https://s4hq7gxfk5.execute-api.us-east-1.amazonaws.com/default/AraGlobalSESMailing"
  const body = {
    fullName: fullName.value,
    email: email.value,
    phone: phone.value,
    message: message.value

  }

  console.log(body);

  const fullBody = {
    method: 'POST',
    body: JSON.stringify(body)
  }


    const sendEmail = async (url, body) => {
    const data = JSON.stringify(body);
    console.log('This is data', data);
    try {
      // if (emailValidator == true && messageValidator == true) {
      const res = await fetch(url, body);
      console.log('This is response to fetch Post request', res);

      if (!res.ok) {
    
        formFailureMessage(res.status);
        console.log(res.status);
      } else {
        // if HTTP-status is 200-299
        // get the response body (the method explained below)
        formSuccessMessage();
        // Set all form inputs to empty.
        setTimeout(() => {
          fullName.value = '';
          email.value = '';
          phone.value = '';
          message.value = '';
        }, 10000);
      }
      // }
    } catch (error) {
      console.error('Error:', error);
    }
  };

  sendEmail(url, fullBody);
    
  })

  function formSuccessMessage () {
    successConfirmation.classList.add('active')
    successConfirmation.innerText = "Thank you...your message has been sent"
    setTimeout(() =>{
      successConfirmation.classList.remove('active')
      successConfirmation.innerText = ""
    }, 7000)
  }

  function formFailureMessage (status) {
    failureConfirmation.classList.add('active')
    failureConfirmation.innerText = `An error with status ${status} as occured, please try again.`
    setTimeout(() =>{
      failureConfirmation.classList.remove('active')
      failureConfirmation.innerText = ""
    }, 7000)
  }
</script>