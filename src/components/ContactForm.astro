---
export interface Props {
  name?: string;
  email?: string;
  phone?: number;
  message?: string;
}
const { name, email, phone, message } = Astro.props;
---

<section class="section-contact">
  <form>
    <h2>Contact Us</h2>
    <div class="form-row">
      <label for="fullname"
        ><span class="material-icons">person</span> Full name</label
      >
      <input
        type="text"
        id="fullname"
        name="fullname"
        required
        placeholder="Jane Doe"
        oninvalid="this.setCustomValidity('Enter Full name here')"
      />
    </div>
    <div class="form-row">
      <label for="email"><span class="material-icons">mail</span> Email</label>
      <input
        type="email"
        id="email"
        name="email"
        required
        placeholder="janedoe@gmail.com"
        oninvalid="this.setCustomValidity('Enter email address here')"
      />
    </div>
    <div class="form-row">
      <label for="phone"><span class="material-icons">phone</span> Phone</label>
      <input
        type="text"
        id="phone"
        name="phone"
        required
        placeholder="xxx-xxx-xxxx"
        oninvalid="this.setCustomValidity('Enter phone number here')"
      />
    </div>
    <div class="form-row">
      <label for="message"
        ><span class="material-icons">message</span> Message</label
      >
      <textarea
        name="message"
        id="message"
        cols="30"
        rows="10"
        required
        placeholder="Enter your messsage here..."
        oninvalid="this.setCustomValidity('Enter your message here')"
      ></textarea>
    </div>
    <div class="form-row">
      <button class="btn">
        <span class="material-icons">send</span> Send
      </button>
    </div>
  </form>
  <div
    class="grecaptcha-badge"
    data-style="bottomright"
    style="width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;"
  >
    <div class="grecaptcha-logo">
      <iframe
        title="reCAPTCHA"
        width="256"
        height="60"
        role="presentation"
        name="a-w11ck77n1l2e"
        frameborder="0"
        scrolling="no"
        sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
        src="https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LevjhEbAAAAACdjZhh9kPi_AtQuXRUJO2iE7a3s&co=aHR0cHM6Ly9hcmFnbG9iYWx0ZWNoLmNvbTo0NDM.&hl=en&v=KXX4ARWFlYTftefkdODAYWZh&size=invisible&cb=ojzyfskx46p3"
      ></iframe>
    </div><div class="grecaptcha-error"></div><textarea
      id="g-recaptcha-response-100000"
      name="g-recaptcha-response"
      class="g-recaptcha-response"
      style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"
    ></textarea>
  </div>
  <div class="success-response"></div>
  <div class="failure-response"></div>
</section>

<style>
  .section-contact {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  .section-contact h2 {
    text-align: center;
    margin-bottom: 25px;
  }

  form {
    background-color: #0f6292;
    color: #fff;
    padding: 40px;
    border-radius: 8px;
    margin: 60px 0;
    width: 22%;
    box-shadow: 1px 1px rgba(0, 0, 0, 0.2);
  }

  input,
  textarea {
    padding: 12px 20px;
    border: none;
    border-radius: 4px;
    margin: 15px 0;
    font-family: inherit;
  }
  input:focus {
    border: none;
    outline: none;
  }
  .form-row {
    display: flex;
    flex-direction: column;
  }
  button:hover {
    background-color: #555;
    color: #fff;
    transition: all 0.3s ease-in;
  }
  .success-message,
  .failure-message {
    display: none;
  }

  .success-response.active {
    display: inline-block;
    background-color: #b0ebb4;
    font-weight:;
    padding: 20px 25px;
    border: none;
    border-radius: 5px;
    box-shadow: 1px 2px rgba(0, 0, 0, 0.2);
    margin-bottom: 25px;
  }

  .failure-response.active {
    display: inline-block;
    background-color: #ffcbcb;
    font-weight:;
    padding: 20px 25px;
    border: none;
    border-radius: 5px;
    box-shadow: 1px 2px rgba(0, 0, 0, 0.2);
    margin-bottom: 25px;
  }

  @media screen and (max-width: 636px) {
    form {
      width: 80%;
    }
  }
</style>

<script>
  const fullName = document.getElementById('fullname');
  const email = document.getElementById('email');
  const phone = document.getElementById('phone');
  const message = document.getElementById('message');
  const send = document.querySelector('.btn');
  const successConfirmation = document.querySelector('.success-response');
  const failureConfirmation = document.querySelector('.failure-response');

  send.addEventListener('click', (e) => {
    e.preventDefault();
    const url =
      'https://s4hq7gxfk5.execute-api.us-east-1.amazonaws.com/default/AraGlobalSESMailing';
    const body = {
      fullName: fullName.value,
      email: email.value,
      phone: phone.value,
      message: message.value,
    };

    console.log(body);

    const fullBody = {
      method: 'POST',
      body: JSON.stringify(body),
    };

    const sendEmail = async (url, body) => {
      const data = JSON.stringify(body);
      console.log('This is data', data);
      try {
        // if (emailValidator == true && messageValidator == true) {
        const res = await fetch(url, body);
        console.log('This is response to fetch Post request', res);

        if (!res.ok) {
          formFailureMessage(res.status);
          console.log(res.status);
        } else {
          // if HTTP-status is 200-299
          // get the response body (the method explained below)
          formSuccessMessage();
          // Set all form inputs to empty.
          setTimeout(() => {
            fullName.value = '';
            email.value = '';
            phone.value = '';
            message.value = '';
          }, 10000);
        }
        // }
      } catch (error) {
        console.error('Error:', error);
      }
    };

    sendEmail(url, fullBody);
  });

  function formSuccessMessage() {
    successConfirmation.classList.add('active');
    successConfirmation.innerText = 'Thank you...your message has been sent';
    setTimeout(() => {
      successConfirmation.classList.remove('active');
      successConfirmation.innerText = '';
    }, 7000);
  }

  function formFailureMessage(status) {
    failureConfirmation.classList.add('active');
    failureConfirmation.innerText = `An error with status ${status} as occured, please try again.`;
    setTimeout(() => {
      failureConfirmation.classList.remove('active');
      failureConfirmation.innerText = '';
    }, 7000);
  }
</script>
